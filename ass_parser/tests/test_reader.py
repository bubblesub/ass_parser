"""Test reader module."""
import io
import tempfile
from pathlib import Path

import pytest

from ass_parser import AssFile, AssStringTable, CorruptAssLineError, read_ass

TEST_ASS_FILE = """\N{BOM}[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: [ReinForce] Saki -  Achiga-hen ~Episode of Side-A~ Kuro's Birthday (BDRip 1920x1080 x264 FLAC).mkv
Video File: [ReinForce] Saki -  Achiga-hen ~Episode of Side-A~ Kuro's Birthday (BDRip 1920x1080 x264 FLAC).mkv
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Scroll Position: 33
Active Line: 47
Video Position: 7132

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,55,&H00E7F4FF,&H000000FF,&H0025315A,&H00000000,-1,0,0,0,100,100,0,0,1,2.5,0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:06.21,0:00:07.22,Default,,0,0,0,,Ako!
Dialogue: 0,0:00:08.71,0:00:10.95,Default,,0,0,0,,- Shizu!\\N- Ako!

[Favorite Meals]
Format: Name,Rating
Cuisine: Pizza,10
Cuisine: Macaroni,8
Cuisine: Veggies,1
"""


def verify_result(result: AssFile) -> None:
    """Verifies that the result of parsing TEST_ASS_FILE is correct."""
    assert len(result.script_info) == 7
    assert result.script_info["Title"] == "Default Aegisub file"
    assert len(result.styles) == 1
    assert len(result.events) == 2
    assert len(result.extra_sections) == 2
    assert result.extra_sections[0].name == "Aegisub Project Garbage"
    assert result.extra_sections[1].name == "Favorite Meals"
    assert isinstance(result.extra_sections[1], AssStringTable)
    assert list(result.extra_sections[1]) == [
        ("Cuisine", {"Name": "Pizza", "Rating": "10"}),
        ("Cuisine", {"Name": "Macaroni", "Rating": "8"}),
        ("Cuisine", {"Name": "Veggies", "Rating": "1"}),
    ]


def test_read_ass_from_string() -> None:
    """Test read_ass function when the source is a string."""
    result = read_ass(TEST_ASS_FILE)
    verify_result(result)


def test_read_ass_from_stream() -> None:
    """Test read_ass function when the source is a stream."""
    with io.StringIO(TEST_ASS_FILE) as handle:
        result = read_ass(handle)
    verify_result(result)


def test_read_ass_from_path() -> None:
    """Test read_ass function when the source is a filesystem path."""
    with tempfile.NamedTemporaryFile() as temp_file:
        path = Path(temp_file.name)
        path.write_text(TEST_ASS_FILE)
        result = read_ass(path)
    verify_result(result)


def test_read_ass_corrupt_ass() -> None:
    """Test read_ass function raises an error when there are no sections."""
    with pytest.raises(CorruptAssLineError):
        read_ass("no sections")
